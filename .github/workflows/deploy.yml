name: Deploy Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_pep8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10.4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run PEP8 check
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: check_pep8
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest ./nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install YC CLI
        run: |
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º yc —Å —è–≤–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º PATH
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | \
          bash -s -- -i /usr/local/bin -n

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
          if ! command -v yc &> /dev/null; then
            echo "::error::YC CLI installation failed"
            exit 1
          fi

          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
          echo "${{ secrets.YC_TOKEN }}" | yc config set-token
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
          if ! yc resource-manager cloud get; then
            echo "::error::YC authentication failed"
            exit 1
          fi

      - name: Download State File
        run: |
          yc storage object download \
            --bucket-name my-kittygram-bucket \
            --object-name terraform.tfstate \
            --output terraform.tfstate

      - name: Extract VM IP from State
        id: get-vm-ip
        run: |
          VM_IP=$(jq -r '.outputs.vm_ip.value' terraform.tfstate)
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
          echo "Extracted VM IP: $VM_IP"

      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ steps.get-vm-ip.outputs.vm_ip }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "kittygram/"

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ steps.get-vm-ip.outputs.vm_ip }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd kittygram/
            sudo touch .env
            sudo chmod 777 .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
            echo "DEBUG=${{ secrets.DEBUG }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml down
            docker compose -f docker-compose.production.yml build
            docker compose -f docker-compose.production.yml up -d
            docker compose -f docker-compose.production.yml exec kittygram_backend python manage.py migrate
            docker compose -f docker-compose.production.yml exec kittygram_backend python manage.py collectstatic --noinput
            docker compose -f docker-compose.production.yml exec kittygram_backend cp -r /app/collected_static/. /static/

  run_tests:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install and run frontend tests
        working-directory: ./frontend
        run: |
          npm install
          npm run test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run backend tests
        working-directory: ./
        run: pytest ./tests/

  telegram-notify:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Notify in Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!

            üë§ –ê–≤—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞: ${{ github.actor }}
            üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ${{ github.event.commits[0].message }}

            üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
